// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msgDef.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_msgDef_2eproto() {
  delete baseInfo::default_instance_;
  delete student::default_instance_;
}

void protobuf_AddDesc_msgDef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  baseInfo::default_instance_ = new baseInfo();
  student::default_instance_ = new student();
  baseInfo::default_instance_->InitAsDefaultInstance();
  student::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_msgDef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_msgDef_2eproto {
  StaticDescriptorInitializer_msgDef_2eproto() {
    protobuf_AddDesc_msgDef_2eproto();
  }
} static_descriptor_initializer_msgDef_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int baseInfo::kNameFieldNumber;
const int baseInfo::kAgeFieldNumber;
const int baseInfo::kSexFieldNumber;
#endif  // !_MSC_VER

baseInfo::baseInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void baseInfo::InitAsDefaultInstance() {
}

baseInfo::baseInfo(const baseInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void baseInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  age_ = 0u;
  sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

baseInfo::~baseInfo() {
  SharedDtor();
}

void baseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    delete sex_;
  }
  if (this != default_instance_) {
  }
}

void baseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const baseInfo& baseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgDef_2eproto();  return *default_instance_;
}

baseInfo* baseInfo::default_instance_ = NULL;

baseInfo* baseInfo::New() const {
  return new baseInfo;
}

void baseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    age_ = 0u;
    if (has_sex()) {
      if (sex_ != &::google::protobuf::internal::kEmptyString) {
        sex_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool baseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_age;
        break;
      }
      
      // required uint32 age = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sex;
        break;
      }
      
      // required string sex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sex()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void baseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required uint32 age = 2;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->age(), output);
  }
  
  // required string sex = 3;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sex(), output);
  }
  
}

int baseInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required uint32 age = 2;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }
    
    // required string sex = 3;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sex());
    }
    
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void baseInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const baseInfo*>(&from));
}

void baseInfo::MergeFrom(const baseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
}

void baseInfo::CopyFrom(const baseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool baseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void baseInfo::Swap(baseInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(age_, other->age_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string baseInfo::GetTypeName() const {
  return "baseInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int student::kBaseInfoFieldNumber;
const int student::kStudentIdFieldNumber;
const int student::kAddressFieldNumber;
const int student::kParentsFieldNumber;
#endif  // !_MSC_VER

student::student()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void student::InitAsDefaultInstance() {
  base_info_ = const_cast< ::baseInfo*>(&::baseInfo::default_instance());
}

student::student(const student& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void student::SharedCtor() {
  _cached_size_ = 0;
  base_info_ = NULL;
  student_id_ = 0u;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

student::~student() {
  SharedDtor();
}

void student::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
    delete base_info_;
  }
}

void student::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const student& student::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_msgDef_2eproto();  return *default_instance_;
}

student* student::default_instance_ = NULL;

student* student::New() const {
  return new student;
}

void student::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_info()) {
      if (base_info_ != NULL) base_info_->::baseInfo::Clear();
    }
    student_id_ = 0u;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
  }
  parents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool student::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .baseInfo base_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_student_id;
        break;
      }
      
      // required uint32 student_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_student_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &student_id_)));
          set_has_student_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_address;
        break;
      }
      
      // optional string address = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parents;
        break;
      }
      
      // repeated .baseInfo parents = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_parents;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void student::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .baseInfo base_info = 1;
  if (has_base_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->base_info(), output);
  }
  
  // required uint32 student_id = 2;
  if (has_student_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->student_id(), output);
  }
  
  // optional string address = 3;
  if (has_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->address(), output);
  }
  
  // repeated .baseInfo parents = 4;
  for (int i = 0; i < this->parents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->parents(i), output);
  }
  
}

int student::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .baseInfo base_info = 1;
    if (has_base_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_info());
    }
    
    // required uint32 student_id = 2;
    if (has_student_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->student_id());
    }
    
    // optional string address = 3;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }
    
  }
  // repeated .baseInfo parents = 4;
  total_size += 1 * this->parents_size();
  for (int i = 0; i < this->parents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parents(i));
  }
  
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void student::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const student*>(&from));
}

void student::MergeFrom(const student& from) {
  GOOGLE_CHECK_NE(&from, this);
  parents_.MergeFrom(from.parents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_info()) {
      mutable_base_info()->::baseInfo::MergeFrom(from.base_info());
    }
    if (from.has_student_id()) {
      set_student_id(from.student_id());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
  }
}

void student::CopyFrom(const student& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool student::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_base_info()) {
    if (!this->base_info().IsInitialized()) return false;
  }
  for (int i = 0; i < parents_size(); i++) {
    if (!this->parents(i).IsInitialized()) return false;
  }
  return true;
}

void student::Swap(student* other) {
  if (other != this) {
    std::swap(base_info_, other->base_info_);
    std::swap(student_id_, other->student_id_);
    std::swap(address_, other->address_);
    parents_.Swap(&other->parents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string student::GetTypeName() const {
  return "student";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
