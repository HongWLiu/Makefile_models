// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgDef.proto

#ifndef PROTOBUF_msgDef_2eproto__INCLUDED
#define PROTOBUF_msgDef_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_msgDef_2eproto();
void protobuf_AssignDesc_msgDef_2eproto();
void protobuf_ShutdownFile_msgDef_2eproto();

class baseInfo;
class student;

// ===================================================================

class baseInfo : public ::google::protobuf::MessageLite {
 public:
  baseInfo();
  virtual ~baseInfo();
  
  baseInfo(const baseInfo& from);
  
  inline baseInfo& operator=(const baseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const baseInfo& default_instance();
  
  void Swap(baseInfo* other);
  
  // implements Message ----------------------------------------------
  
  baseInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const baseInfo& from);
  void MergeFrom(const baseInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required uint32 age = 2;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 2;
  inline ::google::protobuf::uint32 age() const;
  inline void set_age(::google::protobuf::uint32 value);
  
  // required string sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline const ::std::string& sex() const;
  inline void set_sex(const ::std::string& value);
  inline void set_sex(const char* value);
  inline void set_sex(const char* value, size_t size);
  inline ::std::string* mutable_sex();
  inline ::std::string* release_sex();
  
  // @@protoc_insertion_point(class_scope:baseInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_sex();
  inline void clear_has_sex();
  
  ::std::string* name_;
  ::std::string* sex_;
  ::google::protobuf::uint32 age_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_msgDef_2eproto();
  friend void protobuf_AssignDesc_msgDef_2eproto();
  friend void protobuf_ShutdownFile_msgDef_2eproto();
  
  void InitAsDefaultInstance();
  static baseInfo* default_instance_;
};
// -------------------------------------------------------------------

class student : public ::google::protobuf::MessageLite {
 public:
  student();
  virtual ~student();
  
  student(const student& from);
  
  inline student& operator=(const student& from) {
    CopyFrom(from);
    return *this;
  }
  
  static const student& default_instance();
  
  void Swap(student* other);
  
  // implements Message ----------------------------------------------
  
  student* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const student& from);
  void MergeFrom(const student& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::std::string GetTypeName() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .baseInfo base_info = 1;
  inline bool has_base_info() const;
  inline void clear_base_info();
  static const int kBaseInfoFieldNumber = 1;
  inline const ::baseInfo& base_info() const;
  inline ::baseInfo* mutable_base_info();
  inline ::baseInfo* release_base_info();
  
  // required uint32 student_id = 2;
  inline bool has_student_id() const;
  inline void clear_student_id();
  static const int kStudentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 student_id() const;
  inline void set_student_id(::google::protobuf::uint32 value);
  
  // optional string address = 3;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 3;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  
  // repeated .baseInfo parents = 4;
  inline int parents_size() const;
  inline void clear_parents();
  static const int kParentsFieldNumber = 4;
  inline const ::baseInfo& parents(int index) const;
  inline ::baseInfo* mutable_parents(int index);
  inline ::baseInfo* add_parents();
  inline const ::google::protobuf::RepeatedPtrField< ::baseInfo >&
      parents() const;
  inline ::google::protobuf::RepeatedPtrField< ::baseInfo >*
      mutable_parents();
  
  // @@protoc_insertion_point(class_scope:student)
 private:
  inline void set_has_base_info();
  inline void clear_has_base_info();
  inline void set_has_student_id();
  inline void clear_has_student_id();
  inline void set_has_address();
  inline void clear_has_address();
  
  ::baseInfo* base_info_;
  ::std::string* address_;
  ::google::protobuf::RepeatedPtrField< ::baseInfo > parents_;
  ::google::protobuf::uint32 student_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_msgDef_2eproto();
  friend void protobuf_AssignDesc_msgDef_2eproto();
  friend void protobuf_ShutdownFile_msgDef_2eproto();
  
  void InitAsDefaultInstance();
  static student* default_instance_;
};
// ===================================================================


// ===================================================================

// baseInfo

// required string name = 1;
inline bool baseInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void baseInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void baseInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void baseInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& baseInfo::name() const {
  return *name_;
}
inline void baseInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void baseInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void baseInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* baseInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* baseInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 age = 2;
inline bool baseInfo::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void baseInfo::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void baseInfo::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void baseInfo::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 baseInfo::age() const {
  return age_;
}
inline void baseInfo::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
}

// required string sex = 3;
inline bool baseInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void baseInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void baseInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void baseInfo::clear_sex() {
  if (sex_ != &::google::protobuf::internal::kEmptyString) {
    sex_->clear();
  }
  clear_has_sex();
}
inline const ::std::string& baseInfo::sex() const {
  return *sex_;
}
inline void baseInfo::set_sex(const ::std::string& value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void baseInfo::set_sex(const char* value) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(value);
}
inline void baseInfo::set_sex(const char* value, size_t size) {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  sex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* baseInfo::mutable_sex() {
  set_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    sex_ = new ::std::string;
  }
  return sex_;
}
inline ::std::string* baseInfo::release_sex() {
  clear_has_sex();
  if (sex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sex_;
    sex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// student

// required .baseInfo base_info = 1;
inline bool student::has_base_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void student::set_has_base_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void student::clear_has_base_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void student::clear_base_info() {
  if (base_info_ != NULL) base_info_->::baseInfo::Clear();
  clear_has_base_info();
}
inline const ::baseInfo& student::base_info() const {
  return base_info_ != NULL ? *base_info_ : *default_instance_->base_info_;
}
inline ::baseInfo* student::mutable_base_info() {
  set_has_base_info();
  if (base_info_ == NULL) base_info_ = new ::baseInfo;
  return base_info_;
}
inline ::baseInfo* student::release_base_info() {
  clear_has_base_info();
  ::baseInfo* temp = base_info_;
  base_info_ = NULL;
  return temp;
}

// required uint32 student_id = 2;
inline bool student::has_student_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void student::set_has_student_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void student::clear_has_student_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void student::clear_student_id() {
  student_id_ = 0u;
  clear_has_student_id();
}
inline ::google::protobuf::uint32 student::student_id() const {
  return student_id_;
}
inline void student::set_student_id(::google::protobuf::uint32 value) {
  set_has_student_id();
  student_id_ = value;
}

// optional string address = 3;
inline bool student::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void student::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void student::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void student::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& student::address() const {
  return *address_;
}
inline void student::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void student::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void student::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* student::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* student::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .baseInfo parents = 4;
inline int student::parents_size() const {
  return parents_.size();
}
inline void student::clear_parents() {
  parents_.Clear();
}
inline const ::baseInfo& student::parents(int index) const {
  return parents_.Get(index);
}
inline ::baseInfo* student::mutable_parents(int index) {
  return parents_.Mutable(index);
}
inline ::baseInfo* student::add_parents() {
  return parents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::baseInfo >&
student::parents() const {
  return parents_;
}
inline ::google::protobuf::RepeatedPtrField< ::baseInfo >*
student::mutable_parents() {
  return &parents_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_msgDef_2eproto__INCLUDED
